// Generated by CoffeeScript 1.4.0
(function() {

  $.fn.dropShot = function(opts) {
    var fileApiSupported, isMobile, settings;
    settings = $.extend({
      placeholder: 'Browse'
    }, opts);
    isMobile = !!navigator.userAgent.match(/Mobile|webOS/i);
    fileApiSupported = window.File && window.FileReader && window.FileList && window.Blob;
    return this.each(function() {
      var disabled, handleFileChange, inp, setTriggerText, setupDragHandlers, trigger, updateTriggerText, wrapper;
      inp = $(this);
      if (inp.hasClass('snapified') || inp[0].tagName !== 'INPUT') {
        return;
      }
      inp.addClass('snapified');
      setupDragHandlers = function() {
        trigger.on('dragenter', function() {
          return setTimeout(function() {
            return wrapper.addClass('dragging');
          }, 0);
        });
        wrapper.on('dragover', function(e) {
          return e.preventDefault();
        });
        wrapper.on('dragenter', function() {
          return wrapper.addClass('dragging');
        });
        wrapper.on('dragleave', function(e) {
          if ($(e.target).is('button')) {
            return;
          }
          return wrapper.removeClass('dragging');
        });
        return wrapper.on('drop', function(e) {
          e.preventDefault();
          e.stopPropagation();
          wrapper.removeClass('dragging');
          console.log('drop', e);
          handleFileChange(e.originalEvent.dataTransfer.files[0]);
          return false;
        });
      };
      setTriggerText = function() {
        if (fileApiSupported) {
          return;
        }
        return trigger.text(inp.val() ? inp.val().substr(val.lastIndexOf('\\') + 1) : settings.placeholder);
      };
      handleFileChange = function(file) {
        var reader;
        if (fileApiSupported) {
          reader = new FileReader;
          reader.onload = (function(file) {
            if (file.type.indexOf('image/') !== 0) {
              return;
            }
            console.log(file);
            return function(evt) {
              var newImgData;
              newImgData = evt.target.result;
              wrapper.css('background-image', "url(" + newImgData + ")");
              return wrapper.removeClass('empty');
            };
          })(file);
          return reader.readAsDataURL(file);
        } else {
          wrapper.css('background-image', 'none');
          return setTriggerText();
        }
      };
      inp.css({
        display: 'none'
      });
      inp.wrap('<div class="dropshot-container">');
      wrapper = inp.parent();
      wrapper.append("<button class=\"dropshot-trigger\">" + settings.placeholder + "</button>");
      trigger = wrapper.find('.dropshot-trigger');
      if (!inp.data('current-path')) {
        wrapper.addClass('empty');
      }
      if (!fileApiSupported) {
        setTriggerText();
      }
      setupDragHandlers();
      trigger.on('click', function(e) {
        e.preventDefault();
        return inp.trigger('click');
      });
      inp.on('change', function() {
        return handleFileChange(inp[0].files[0]);
      });
      return;
      disabled = sel.prop('disabled');
      if (disabled) {
        wrapper.addClass('disabled');
      }
      updateTriggerText = function() {
        return trigger.text(sel.find(':selected').text());
      };
      sel.on('enable', function() {
        sel.prop('disabled', false);
        wrapper.removeClass('disabled');
        disabled = false;
        return copyOptionsToList();
      });
      sel.on('disable', function() {
        sel.prop('disabled', true);
        wrapper.addClass('disabled');
        return disabled = true;
      });
      return sel.on('update', function() {
        return wrapper.find('.options').empty();
      });
    });
  };

}).call(this);
