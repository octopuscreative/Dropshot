// Generated by CoffeeScript 1.6.3
(function() {
  $.fn.dropShot = function(opts) {
    var fileApiSupported, isMobile, settings;
    settings = $.extend({
      placeholder: 'Browse'
    }, opts);
    isMobile = !!navigator.userAgent.match(/Mobile|webOS/i);
    fileApiSupported = window.File && window.FileReader && window.FileList && window.Blob;
    return this.each(function() {
      var disabled, existing, existingIsImage, handleFileChange, inp, setFilenameText, trigger, updateTriggerText, wrapper;
      inp = $(this);
      if (inp.hasClass('dropshotified') || !inp.is('input[type="file"]')) {
        return;
      }
      inp.addClass('dropshotified');
      setFilenameText = function(newVal) {
        var actualVal;
        actualVal = newVal || (inp.val() ? inp.val().substr(val.lastIndexOf('\\') + 1) : settings.placeholder);
        return wrapper.addClass('filename').attr('data-filename', actualVal);
      };
      handleFileChange = function(file) {
        var imagey, reader;
        if (fileApiSupported) {
          imagey = /^image\/(png|jpg|jpeg|gif|svg(\+xml)?)$/.test(file.type);
          if (imagey) {
            reader = new FileReader;
            reader.onload = (function(file) {
              wrapper.removeClass('empty filename');
              return function(evt) {
                var newImgData;
                newImgData = evt.target.result;
                return wrapper.css('background-image', "url(" + newImgData + ")");
              };
            })(file);
            return reader.readAsDataURL(file);
          } else {
            wrapper.css('background-image', 'none');
            return setFilenameText(file.name);
          }
        } else {
          wrapper.css('background-image', 'none');
          return setFilenameText();
        }
      };
      inp.wrap('<div class="dropshot-container">');
      wrapper = inp.parent();
      wrapper.append("<button class=\"dropshot-trigger\">" + settings.placeholder + "</button>");
      trigger = wrapper.find('.dropshot-trigger');
      inp.css({
        opacity: 0,
        display: 'block',
        width: '100%',
        height: '100%',
        position: 'absolute',
        top: 0,
        left: 0,
        fontSize: wrapper.outerHeight(),
        marginTop: -30
      });
      if (!inp.data('current-path')) {
        wrapper.addClass('empty');
      }
      existing = inp.data('existing-file-url');
      if (existing) {
        if (fileApiSupported) {
          existingIsImage = /\.(png|jpg|jpeg|gif|svg\+xml)$/.test(existing);
          if (existingIsImage) {
            wrapper.removeClass('empty').css('background-image', "url(" + existing + ")");
          } else {
            setFilenameText(existing);
          }
        } else {
          setFilenameText(existing);
        }
      }
      trigger.on('click', function(e) {
        e.preventDefault();
        return inp.trigger('click');
      });
      inp.on('change', function() {
        return handleFileChange(inp[0].files[0]);
      });
      return;
      disabled = sel.prop('disabled');
      if (disabled) {
        wrapper.addClass('disabled');
      }
      updateTriggerText = function() {
        return trigger.text(sel.find(':selected').text());
      };
      sel.on('enable', function() {
        sel.prop('disabled', false);
        wrapper.removeClass('disabled');
        disabled = false;
        return copyOptionsToList();
      });
      sel.on('disable', function() {
        sel.prop('disabled', true);
        wrapper.addClass('disabled');
        return disabled = true;
      });
      return sel.on('update', function() {
        return wrapper.find('.options').empty();
      });
    });
  };

}).call(this);
